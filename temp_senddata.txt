  /**
   * Send collected data to the endpoint
   */
  async sendData(isFinal = false) {
    // Clone the current data to avoid race conditions
    const dataToSend = JSON.parse(JSON.stringify(this.sessionData));
    
    // Add flag indicating if this is the final batch for this session
    dataToSend.isFinal = isFinal;
    
    // Debug mode: just log the data
    if (window.debugCardEvents) {
      console.log('Card event data:', dataToSend);
    }
    
    // Only send data if we're in production mode or explicitly enabled
    if (this.options.enableDataSending || window.enableCardTracking) {
      try {
        // First, get a token from our proxy server
        const tokenResponse = await fetch(this.options.tokenEndpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (\!tokenResponse.ok) {
          throw new Error(`Failed to get token: ${tokenResponse.status}`);
        }
        
        const tokenData = await tokenResponse.json();
        const token = tokenData.token;
        
        // Now send the event data
        const eventResponse = await fetch(this.options.eventsEndpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            event_type: 'card_interaction_event',
            client_payload: dataToSend
          })
        });
        
        if (\!eventResponse.ok) {
          throw new Error(`Failed to send event data: ${eventResponse.status}`);
        }
        
        if (window.debugCardEvents) {
          console.log('Event data sent successfully');
        }
      } catch (err) {
        console.error('Failed to send card event data:', err);
      }
    }
    
    // Reset interactions array if this isn't the final send
    // to avoid sending duplicate data
    if (\!isFinal) {
      this.sessionData.interactions = [];
    }
  }
