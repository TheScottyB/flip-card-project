name: GitHub Pages Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Enable manual trigger

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          # Don't use the built-in caching to avoid artifacts issue

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:a11y
        continue-on-error: true  # Don't fail the build if tests fail

      - name: Generate accessibility report
        run: npm run test:report
        continue-on-error: true  # Ensure we can still deploy even if report generation fails

      - name: Build project
        run: npm run build:prod

      - name: Prepare deployment directory
        run: |
          mkdir -p _site
          # Copy HTML files from root
          cp index.html multi-card.html demo-card.html react-card.html _site/
          
          # Copy directories with source files
          mkdir -p _site/src
          cp -r src/components src/images src/js src/styles _site/src/
          
          # Copy React components
          cp -r react-components _site/react-components
          
          # Ensure dist directory exists and copy all files
          mkdir -p _site/dist/css _site/dist/js
          cp -r dist/css/* _site/dist/css/ || true
          cp -r dist/js/* _site/dist/js/ || true
          
          # Copy documentation and reports
          mkdir -p _site/test-report
          cp -r test-report/* _site/test-report/
          
          # Copy documentation files
          cp README.md _config.yml _site/

      - name: Setup Pages
        uses: actions/configure-pages@v3

      # Instead of uploading test reports separately, we'll include them in the site
      - name: Ensure test reports are included in site
        run: |
          echo "Note: Test reports are available in the _site/test-report directory"

      # Upload pages artifact
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
